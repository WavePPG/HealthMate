import requests
from io import BytesIO
from PIL import Image
import uvicorn
import numpy as np
import os
import faiss
import google.generativeai as genai
from fastapi import FastAPI, HTTPException, Request, UploadFile, File, Form
from linebot import LineBotApi, WebhookHandler
from linebot.models import (
    MessageEvent, TextMessage, ImageMessage, FlexSendMessage,
    BubbleContainer, CarouselContainer, BoxComponent,
    TextComponent, ButtonComponent, URIAction, TextSendMessage
)
from linebot.exceptions import InvalidSignatureError, LineBotApiError
from sentence_transformers import SentenceTransformer
from typing import Dict, Optional, List
from contextlib import asynccontextmanager

# Environment variables
ACCESS_TOKEN = os.getenv("LINE_ACCESS_TOKEN", "FfVoDvJvHY3kYAqiA/Rgr32EBpgyDfssfV5aX5L+8Zry5vf1yyc9qRcqkRAru52gJzYQJlgd4jKZIFoMo/iQlLPRsz+S6NO12SrIYFn2UzCV/iOv7wIdJGnVVgNcn+rem7ej+0FGKOdzQX4/VYGZuwdB04t89/1O/w1cDnyilFU=")
CHANNEL_SECRET = os.getenv("LINE_CHANNEL_SECRET", "99a40583e525a2daf0494e3198c45907")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY", "AIzaSyAc_q2XhfyjjDzwiK3mDnQ9y4BIvfOJeGM")

# Setup LINE API with error handling
try:
    line_bot_api = LineBotApi(ACCESS_TOKEN)
    handler = WebhookHandler(CHANNEL_SECRET)
except Exception as e:
    print(f"Error initializing LINE bot: {str(e)}")
    raise

# Setup Gemini
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-1.5-flash")

class RAGSystem:
    def __init__(self, embedding_model: str = 'all-MiniLM-L6-v2'):
        self.embedding_model = SentenceTransformer(embedding_model)
        self.database = {
            'documents': [],
            'embeddings': [],
            'metadata': []
        }
        self.create_faiss_index()

    def add_document(self, text: str, metadata: dict = None):
        try:
            embedding = self.embedding_model.encode([text])[0]
            self.database['documents'].append(text)
            self.database['embeddings'].append(embedding.tolist())
            self.database['metadata'].append(metadata or {})
            self.create_faiss_index()
        except Exception as e:
            print(f"Error adding document: {str(e)}")

    def create_faiss_index(self):
        if not self.database['embeddings']:
            self.index = None
            return
        try:
            embeddings = np.array(self.database['embeddings'], dtype='float32')
            dimension = embeddings.shape[1]
            self.index = faiss.IndexFlatL2(dimension)
            self.index.add(embeddings)
        except Exception as e:
            print(f"Error creating FAISS index: {str(e)}")
            self.index = None

    def retrieve_documents(self, query: str, top_k: int = 3) -> List[str]:
        if not self.database['embeddings'] or self.index is None:
            return []
        try:
            query_embedding = self.embedding_model.encode([query]).astype('float32')
            D, I = self.index.search(query_embedding, top_k)
            return [self.database['documents'][i] for i in I[0] if i < len(self.database['documents'])]
        except Exception as e:
            print(f"Error retrieving documents: {str(e)}")
            return []

    def clear_database(self):
        self.database = {
            'documents': [],
            'embeddings': [],
            'metadata': []
        }
        self.index = None

rag = RAGSystem()

# Manual contents
EMERGENCY_MANUAL = """‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå "Emergency" üÜò
‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å:
‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô: ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "Emergency" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ
‡∏ñ‡∏≤‡∏°-‡∏ï‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏ö‡∏≠‡∏ó: ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô ‡πÄ‡∏ä‡πà‡∏ô "‡∏ä‡πâ‡∏≤‡∏á‡πÄ‡∏´‡∏¢‡∏µ‡∏¢‡∏ö‡∏£‡∏ñ‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
"""

WATCH_ELEPHANT_MANUAL = """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡πâ‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô ‡πÉ‡∏´‡πâ‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:
1.‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏ï‡∏¥‡πÉ‡∏´‡πâ‡∏°‡∏±‡πà‡∏ô: ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏™‡∏á‡∏ö‡∏™‡∏ï‡∏¥‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå ‡∏≠‡∏¢‡πà‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏∑‡πà‡∏ô‡∏ï‡∏£‡∏∞‡∏´‡∏ô‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏ß‡∏≤‡∏î‡∏Å‡∏•‡∏±‡∏ß
2.‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏≤‡∏¢‡∏ï‡∏≤: ‡∏≠‡∏¢‡πà‡∏≤‡∏™‡∏ö‡∏ï‡∏≤‡∏Å‡∏±‡∏ö‡∏ä‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡πÉ‡∏´‡πâ‡∏°‡∏≠‡∏á‡∏•‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏≠‡∏∑‡πà‡∏ô
3.‡∏ñ‡∏≠‡∏¢‡∏´‡πà‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡πâ‡∏≤‡πÜ: ‡∏Ñ‡πà‡∏≠‡∏¢‡πÜ ‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏≠‡∏Å‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ä‡πâ‡∏≤‡∏á ‡∏≠‡∏¢‡πà‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏Å‡∏∞‡∏ó‡∏±‡∏ô‡∏´‡∏±‡∏ô
4.‡∏°‡∏≠‡∏á‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏ö‡∏±‡∏á: ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á ‡πÄ‡∏ä‡πà‡∏ô ‡∏´‡∏•‡∏±‡∏á‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÉ‡∏´‡∏ç‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≥‡πÅ‡∏û‡∏á
5.‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà: ‡∏£‡∏µ‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ç‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡πÇ‡∏ó‡∏£ 086-092-6529 ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ ‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏Å‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß
"""

CHECK_ELEPHANT_MANUAL = """üêò ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡πâ‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏≠‡∏Å‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á! ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏à‡∏≤‡∏Å‡∏ä‡πâ‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà üëâ ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏•‡∏¢
"""

OFFICER_MANUAL = """üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà
‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏ó‡∏∏‡∏Å‡∏Å‡∏£‡∏ì‡∏µ: ‡πÇ‡∏ó‡∏£ 1669 (‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≠‡∏î 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏Å‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß: ‡πÇ‡∏ó‡∏£ 086-092-6529
‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏ó‡∏¢‡∏≤‡∏ô‡πÅ‡∏´‡πà‡∏á‡∏ä‡∏≤‡∏ï‡∏¥‡πÄ‡∏Ç‡∏≤‡πÉ‡∏´‡∏ç‡πà: ‡πÇ‡∏ó‡∏£ 086-092-6527
"""

@asynccontextmanager
async def lifespan(app: FastAPI):
    try:
        sample_documents = [EMERGENCY_MANUAL, WATCH_ELEPHANT_MANUAL, CHECK_ELEPHANT_MANUAL, OFFICER_MANUAL]
        for doc in sample_documents:
            rag.add_document(doc)
        yield
    finally:
        rag.clear_database()

app = FastAPI(lifespan=lifespan)

def get_manual_response(user_message: str) -> Optional[str]:
    user_message = user_message.strip().lower()
    manuals = {
        "emergency": EMERGENCY_MANUAL,
        "‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô": EMERGENCY_MANUAL,
        "emergency ‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏ó‡∏≥‡∏¢‡∏±‡∏á‡πÑ‡∏á": WATCH_ELEPHANT_MANUAL,
        "‡∏°‡∏µ‡πÄ‡∏´‡∏ï‡∏∏‡∏£‡πâ‡∏≤‡∏¢‡πÉ‡∏Å‡∏•‡πâ‡∏ï‡∏±‡∏ß": WATCH_ELEPHANT_MANUAL,
        "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡πâ‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á": CHECK_ELEPHANT_MANUAL,
        "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà": OFFICER_MANUAL,
        "contact officer": OFFICER_MANUAL
    }
    return manuals.get(user_message)

def create_bubble_container(text: str) -> BubbleContainer:
    return BubbleContainer(
        body=BoxComponent(
            layout="vertical",
            contents=[
                TextComponent(text=text, wrap=True, size="md")
            ]
        )
    )

def create_flex_message(text: str) -> FlexSendMessage:
    bubble = create_bubble_container(text)
    return FlexSendMessage(alt_text="WildSafe Message", contents=bubble)

def create_carousel_message(texts: list) -> FlexSendMessage:
    bubbles = [create_bubble_container(text) for text in texts]
    carousel = CarouselContainer(contents=bubbles)
    return FlexSendMessage(alt_text="WildSafe Carousel", contents=carousel)

def safe_send_message(reply_token: str, messages: List[FlexSendMessage]) -> bool:
    try:
        line_bot_api.reply_message(reply_token, messages)
        return True
    except LineBotApiError as e:
        print(f"LINE API Error: {str(e)}")
        try:
            fallback_message = TextSendMessage(text="‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
            line_bot_api.reply_message(reply_token, fallback_message)
        except Exception as e:
            print(f"Fallback message failed: {str(e)}")
        return False
    except Exception as e:
        print(f"Unexpected error in send_message: {str(e)}")
        return False

@app.post('/message')
async def message(request: Request):
    signature = request.headers.get('X-Line-Signature')
    if not signature:
        raise HTTPException(status_code=400, detail="X-Line-Signature header is missing")
    
    body = await request.body()
    try:
        handler.handle(body.decode("UTF-8"), signature)
    except InvalidSignatureError:
        raise HTTPException(status_code=400, detail="Invalid signature")
    except Exception as e:
        print(f"Error handling webhook: {str(e)}")
        raise HTTPException(status_code=500, detail="Internal server error")
    return {"status": "ok"}

@handler.add(MessageEvent, message=(TextMessage, ImageMessage))
def handle_message(event: MessageEvent):
    try:
        if isinstance(event.message, TextMessage):
            user_message = event.message.text
            manual_response = get_manual_response(user_message)
            
            if manual_response:
                reply = create_flex_message(manual_response)
            else:
                relevant_to_rag = any(user_message.strip().lower() == phrase for phrase in ['‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô', '‡∏ä‡πâ‡∏≤‡∏á', '‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà'])
                
                if relevant_to_rag:
                    retrieved_docs = rag.retrieve_documents(user_message, top_k=3)
                    if retrieved_docs:
                        texts = ["‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà" if "http" in doc else doc for doc in retrieved_docs]
                        reply = create_carousel_message(texts)
                    else:
                        gemini_response = model.generate_content(user_message + " ‡πÉ‡∏´‡πâ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏±‡πâ‡∏ô‡πÜ‡πÉ‡∏ô 2-3 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î")
                        reply = create_flex_message(gemini_response.text.strip().split("\n")[:3])
                else:
                    gemini_response = model.generate_content(user_message + " ‡πÉ‡∏´‡πâ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏±‡πâ‡∏ô‡πÜ‡πÉ‡∏ô 2-3 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î ‡πÇ‡∏î‡∏¢‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û")
                    reply = create_flex_message("\n".join(gemini_response.text.strip().split("\n")[:3]))

            safe_send_message(event.reply_token, [reply])

        elif isinstance(event.message, ImageMessage):
            try:
                headers = {"Authorization": f"Bearer {ACCESS_TOKEN}"}
                url = f"https://api-data.line.me/v2/bot/message/{event.message.id}/content"
                response = requests.get(url, headers=headers, stream=True)
                response.raise_for_status()
                
                image_data = BytesIO(response.content)
                image = Image.open(image_data)
                
                if image.size[0] * image.size[1] > 1024 * 1024:
                    message = "‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡∏£‡∏±‡∏ö ‡∏†‡∏≤‡∏û‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
                else:
                    try:
                        gemini_response = model.generate_content("‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏±‡πâ‡∏ô‡πÜ‡πÉ‡∏ô 2-3 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î")
                        message = "\n".join(gemini_response.text.strip().split("\n")[:3])
                    except Exception:
                        message = "‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ó‡∏ô‡∏Ñ‡πà‡∏∞ üôèüèª"
            except Exception as e:
                print(f"Error processing image: {str(e)}")
                message = "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î, ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏áüôèüèª"
            
            reply = create_flex_message(message)
            safe_send_message(event.reply_token, [reply])

    except Exception as e:
        print(f"Error in handle_message: {str(e)}")
        try:
            error_message = create_flex_message("‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
            safe_send_message(event.reply_token, [error_message])
        except Exception as send_error:
            print(f"Error sending error message: {str(send_error)}")

def validate_token(token: str) -> bool:
    """Validate LINE reply token."""
    if not token:
        return False
    if len(token) != 32:  # LINE reply tokens are typically 32 characters
        return False
    return True

def sanitize_message(message: str) -> str:
    """Sanitize message content to prevent any potential issues."""
    if not message:
        return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"
    # Limit message length to prevent overlong messages
    return message[:2000] if len(message) > 2000 else message

def create_error_message(error_type: str) -> str:
    """Create appropriate error messages based on error type."""
    error_messages = {
        "token": "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
        "processing": "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ",
        "image": "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ",
        "general": "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
    }
    return error_messages.get(error_type, error_messages["general"])

if __name__ == "__main__":
    try:
        # Validate environment variables
        if not ACCESS_TOKEN or not CHANNEL_SECRET or not GEMINI_API_KEY:
            raise ValueError("Missing required environment variables")
        
        # Start the FastAPI application
        uvicorn.run("main:app", port=8000, host="0.0.0.0", reload=False)
    except Exception as e:
        print(f"Error starting application: {str(e)}")
